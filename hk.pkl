// Install with `hk install --mise` to ensure local tools are available

amends "package://github.com/jdx/hk/releases/download/v0.7.5/hk@0.7.5#/Config.pkl"
import "package://github.com/jdx/hk/releases/download/v0.7.5/hk@0.7.5#/builtins.pkl"

min_hk_version = "0.7.0"

// FYI: see file extension mappings used by pre-commit: https://github.com/pre-commit/identify/blob/dc20df20bda102dc74ca8531465bfcd20a7f26bf/identify/extensions.py

// PLANNED: I'm not sure how to filter for only files. Created with: `cloc . --vcs=git`
local file_list = List("**/*.{gitignore,go,md,pkl,py,sql,toml,yaml,yml}")

local linters = new Mapping<String, LinterStep> {
    ["actionlint"] = builtins.actionlint
    // TODO: can't use `{{ files }}` because of error: `typechecking error: named files must all be in one directory; have cmd/config and cmd`
    // ["golangci_lint"] = builtins.golangci_lint
    ["golangci_lint"] {
        glob = List("**/*.go")
        check = "golangci-lint run {{ files }}"
        fix = "golangci-lint run --fix {{ files }}"
        workspace_indicator = "go.mod"
    }
    ["ls-lint"] {
        check = "ls-lint"
    }
    ["pkl"] {
        glob = List("*.pkl")
        check = "pkl eval {{files}} >/dev/null"
    }
    ["pch-check-added-large-files"] {
        glob = file_list
        check = "check-added-large-files {{ files }}"
    }
    ["pch-check-merge-conflict"] {
        glob = file_list
        check = "check-merge-conflict {{ files }}"
    }
    ["pch-check-symlinks"] {
        glob = file_list
        check = "check-symlinks {{ files }}"
    }
    ["pch-check-vcs-permalinks"] {
        glob = file_list
        check = "check-vcs-permalinks {{ files }}"
    }
    ["pch-check-yaml"] {
        glob = List("**/*.{yml,yaml}")
        check = "check-yaml {{ files }}"
    }
    ["pch-end-of-file-fixer"] {
        glob = file_list
        // FYI: without check, these fixers are always run!
        check_first = false  // FYI: without check_first, these linters request write-locks on all files
        fix = "end-of-file-fixer {{ files }}"
    }
    ["pch-mixed-line-ending"] {
        glob = file_list
        check_first = false
        fix = "mixed-line-ending {{ files }}"
    }
    ["pch-trailing-whitespace-fixer"] {
        glob = file_list
        check_first = false
        fix = "trailing-whitespace-fixer {{ files }}"
    }
    ["sql_fluff"] = builtins.sql_fluff
    ["toml-sort"] {
        glob = List("**/*.toml")
        check = "toml-sort --check {{ files }}"
        fix = "toml-sort --in-place {{ files }}"
    }
}



local commit_msg_checks = new Mapping<String, LinterStep> {
    ["commitizen"] {
        check = "cz check --allow-abort --commit-msg-file={{commit_msg_file}}"
    }
}
local pre_push_checks = new Mapping<String, LinterStep> {
    ["ci"] {
        check = "mise run ci"
    }
    ["commitizen-branch"] {
        check = "cz check --rev-range origin/HEAD..HEAD"
    }
}

// FYI: there are additional configuration options for batch, workspace_indicator, etc. https://hk.jdx.dev/configuration.html
hooks = new {
    ["pre-commit"] {
        fix = true
        steps = new {
            ["stash"] = new StashStep {}
            ...linters
        }
    }
    ["pre-push"] {
        steps = new {
            // FYI: PRs aren't required for this project
            // ["pch-no-commit-to-branch"] {
            //     run = "no-commit-to-branch --branch=main"
            // }
            ...pre_push_checks
            ...linters
        }
    }
    ["commit-msg"] {
        steps = commit_msg_checks
    }

    // "fix" and "check" are special steps for `hk fix` and `hk check` commands
    ["fix"] {
        fix = true
        steps = linters
    }
    ["check"] {
        steps = new {
            ...pre_push_checks
            ...linters
        }
    }
}
