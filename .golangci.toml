# Configuration file for golangci-lint
# For more options, see https://golangci-lint.run/usage/configuration/
#
# Adapted from:
# - https://github.com/elastic/elastic-agent/blob/ad06a2989e715220009cd8b27b4a315c92a24b15/.golangci.yml
# - https://github.com/virtual-kubelet/virtual-kubelet/blob/5c534ffcd6074044b00a5151da84ac2cc8ce3f12/.golangci.yml
# - https://github.com/containerd/containerd/blob/b22a302a75d9a7d7955780e54cc5b32de6c8525d/.golangci.yml

[linters] # Find the whole list here https://golangci-lint.run/usage/linters/
default = "standard"
disabled = [
  "forbidigo", # forbids identifiers matched by reg exps # PLANNED: restore when fmt.Print is not necessary
]
enable = [
  "asciicheck", # simple linter to check that your code does not contain non-ASCII identifiers
  "bodyclose", # checks whether HTTP response body is closed successfully
  "copyloopvar", # A linter detects places where loop variables are copied
  "cyclop", # Checks function and package cyclomatic complexity
  "durationcheck", # check for two durations multiplied together
  "errcheck", # checking for unchecked errors in go programs
  "errorlint", # errorlint is a linter for that can be used to find code that will cause problems with the error wrapping scheme introduced in Go 1.13
  "fatcontext", # Detects nested contexts in loops and function literals
  "gocritic", # Provides diagnostics that check for bugs, performance and style issues
  "goimports", # Goimports does everything that gofmt does. Additionally it checks unused imports
  "gomoddirectives", # Manage the use of 'replace', 'retract', and 'excludes' directives in go.mod
  "gomodguard", # check for blocked imports from go.mod
  "gosec", # inspects source code for security problems
  "gosimple", # linter for Go source code that specializes in simplifying a code
  "govet", # Vet examines Go source code and reports suspicious constructs, such as Printf calls whose arguments do not align with the format string
  "iface", # Detect the incorrect use of interfaces, helping developers avoid interface pollution
  "ineffassign", # detects when assignments to existing variables are not used
  "intrange", # Intrange is a linter to find places where for loops could make use of an integer range
  "misspell", # finds commonly misspelled English words in comments
  "nakedret", # finds naked returns in functions greater than a specified function length
  "nilerr", # finds the code that returns nil even if it checks that the error is not nil
  "noctx", # noctx finds sending http request without context.Context
  "nolintlint", # reports ill-formed or insufficient nolint directives
  "perfsprint", # Checks that fmt.Sprintf can be replaced with a faster alternative
  "prealloc", # Finds slice declarations that could potentially be pre-allocated
  "predeclared", # Find code that shadows one of Go's predeclared identifiers
  "revive", # Fast, configurable, extensible, flexible, and beautiful linter for Go. Drop-in replacement of golint
  "sqlclosecheck", # Checks that sql.Rows, sql.Stmt, sqlx.NamedStmt, pgx.Query are closed
  "staticcheck", # Staticcheck is a go vet on steroids, applying a ton of static analysis checks
  "stylecheck", # a replacement for golint
  "testifylint", # Checks usage of github.com/stretchr/testify
  "testpackage", # makes you use a separate _test package
  "typecheck", # Like the front-end of a Go compiler, parses and type-checks Go code
  "unconvert", # Remove unnecessary type conversions
  "unused", # checks Go code for unused constants, variables, functions and types
  "wastedassign", # wastedassign finds wasted assignment statements
  "wrapcheck", # Checks that errors returned from external packages are wrapped
  "wsl", # Add or remove empty lines
]
relative-path-mode = "gomod"

[linters.settings] # See all configuration here: https://golangci-lint.run/usage/linters

[linters.settings.revive]
enable-all-rules = true

[linters.settings.rowserrcheck]
packages = ["github.com/jmoiron/sqlx"]

[linters.settings.staticcheck]
checks = ["all"]

[linters.settings.testifylint]
enable-all = true

[run]
timeout = "1m" # Default is 1 min
